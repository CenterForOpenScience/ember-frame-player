import ExpFrameBaseComponent from '../exp-frame-base/component';
import layout from './template';
// Import any mixins here, e.g. import VideoRecord from '../../mixins/video-record';

// The YUIdoc comments, using /** ... */ syntax, will be automatically compiled into
// nice user-facing documentation as shown here (https://lookit.github.io/ember-lookit-frameplayer/modules/frames.html)
// once your changes are merged into the lookit/ember-lookit-frameplayer repo. You can see how they look
// locally as described here: https://lookit.readthedocs.io/en/develop/ember-app-installation.html#writing-documentation-of-frames


/**
 * @module exp-player
 * @submodule frames
 */

/**
 * TODO: short description of what your frame does. Include example usage below.
 *
 * TODO: You should also add a screenshot of your frame in the location
 * ember-lookit-frameplayer/screenshots/Exp-your-frame-name.png, and it will be added
 * to the YUIdoc page.
 *
```json
 "frames": {
    "test-trial": {
        "kind": "exp-your-frame-name",
        "id": "test-trial"
    }
 }

 * ```
 * @class ExpYourFrameName TODO: change to your actual frame name
 * @extends ExpFrameBase
 * @uses FullScreen TODO: add any mixins that your frame uses like this
 */



export default ExpFrameBaseComponent.extend({ //list any mixins here before the {
    type: '<%= dasherizedModuleName %>',
    layout: layout,

    frameSchemaProperties: {
        // define configurable parameters of your frame here in valid JSON Schema format.
        // See http://json-schema.org/latest/json-schema-validation.html#rfc.section.5
        // for what forms of validation are available. The frame configuration - i.e. the
        // object in the study JSON that defines a frame of this type - will be validated
        // against a JSON Schema {type: 'object', properties: frameSchemaProperties}.
        // Each property should have a YUIdoc comment as shown in the example below.

        /**
         * Whether to show a picture of a cat.
         *
         * @property {Boolean} showCatPicture
         * @default false
         */
        showCatPicture: {
            type: 'boolean',
            default: false,
            description: 'Whether to show a picture of a cat.'
        }
    },

    // List any parameters of your frame that are required here. These must be defined somehow
    // on the frame when it is instantiated - but default values and values generated by
    // a generateProperties function or substituted in via parameters are ok.
    frameSchemaRequired: ['showCatPicture'],

    meta: {
        name: '<%= classifiedModuleName %>',
        description: 'TODO: a description of this frame goes here.',
        data: {
             /**
             * What the child responded about the cat
             *
             * @attribute whatTheChildThoughtAboutTheCat
             * @type string
             */
            type: 'object',
            properties: {
                // define data to be sent to the server here.

                /**
                 * What the child responded about the cat
                 *
                 * @attribute whatTheChildThoughtAboutTheCat
                 * @type string
                 */
                whatTheChildThoughtAboutTheCat: {
                    type: 'string'
                }
            }
        }
    },
    actions: {
        // Define any actions that you need to be able to trigger from within the template here
    },

    // Other functions that are just called from within your frame can be defined here, on
    // the same level as actions and meta. You'll be able to call them as this.functionName(arguments)
    // rather than using this.send('actionName')

    // Anything that should happen immediately after loading your frame (see
    // https://guides.emberjs.com/release/components/the-component-lifecycle/ for other
    // hooks you can use and when they're all called). You can delete this if not doing
    // anything additional.
    didInsertElement() {
        this._super(...arguments);
    },

    // Anything that should happen before destroying your frame, e.g. removing a keypress
    // handlers. You can delete this if not doing anything additional.
    willDestroyElement() {
        this._super(...arguments);
    }
});
